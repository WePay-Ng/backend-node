import nodemailer from 'nodemailer';
import forgotPassword from './templates/forgot-password';
import passwordChanged from './templates/password-changed';
import welcome from './templates/welcome';
import verificationEmail from './templates/verification-email';
import { environment } from '@/config/env';
import { logError } from '@/utils/logger';
import { Resend } from 'resend';
import { MailOptions, SelectTemplate, SendEmail } from '@/types/types';

export default async ({ to, template, variables, templateId }: SendEmail) => {
  if (!template) throw new Error('No mail template specified');

  const { subject, template: temp } = await selectTemplate({
    template,
    variables,
  });

  if (['PRODUCTION', 'DEVELOP'].includes(environment.context)) {
    const resend = new Resend(process.env.RESEND_KEY);
    const { data, error } = await resend.emails.send({
      from: `"${process.env.APP_NAME}" <info@emails.masteringbackend.com>`,
      to: to,
      subject: subject,
      html: temp ?? '<h2>Check the subject </h2>',
    });

    if (error) {
      console.log(error);
      return;
    }

    return data;
  }

  new Promise((resolve, reject) => {
    // create message
    const mailOptions: MailOptions = {
      from: `"${process.env.APP_NAME}" <info@pressmoni.com>`,
      to,
      subject,
      html: temp ?? '<h2>Check the subject </h2>',
    };

    const mailConfig: any = {
      host: environment.mail?.host || 'smtp.mailtrap.io',
      port: environment.mail?.port || 2525,
      secure: true,
      auth: {
        user: environment.mail?.username || 'a3d1159bbbe3a6', //generated by Mailtrap
        pass: environment.mail?.password || '2b4668fe2d6a67', //generated by Mailtrap
      },
      connectionTimeout: 10000, // 10 seconds
      greetingTimeout: 10000,
      socketTimeout: 10000,
    };

    // console.log(mailOptions, mailConfig);

    if (environment.mail?.host?.includes('gmail'))
      mailConfig['service'] = environment.mail?.host;

    const transporter = nodemailer.createTransport(mailConfig);

    transporter.sendMail(mailOptions, (error, info) => {
      if (error) {
        console.log(error);
        logError('sendEmail %o', { mailOptions, error });
        reject(new Error('try email again later'));
        return;
      }
      console.log(info);
      transporter.close();
      resolve(info);
    });
    return;
  });
};

const selectTemplate = async ({ template, variables }: SelectTemplate) => {
  let subject = ``;
  let _template = undefined;
  switch (template) {
    case 'forgot-password':
      subject += `Password Reset`;
      _template = forgotPassword(variables);
      break;
    case 'verification':
      subject += `Email Verification`;
      _template = verificationEmail(variables);
      break;
    case 'password-changed':
      subject += `Password Changed`;
      _template = passwordChanged(variables);
      break;
    case 'welcome':
      subject += `Welcome to Masteringbackend!`;
      _template = welcome(variables);
      break;
    default:
      break;
  }
  return { template: _template, subject };
};
