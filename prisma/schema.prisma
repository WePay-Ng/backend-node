generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String               @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  email                  String               @unique
  password               String?              @db.VarChar(60)
  name                   String?
  bvn                    String?              @db.VarChar(60)
  gender                 Gender               @default(Male)
  dob                    DateTime?            @db.Date
  phone                  String?              @unique @db.VarChar(20)
  occupation             String?              @db.VarChar(30)
  education              String?              @db.VarChar(30)
  religion               String?              @db.VarChar(30)
  maritalStatus          String?              @db.VarChar(20)
  pin                    String?
  isLocked               Boolean              @default(false)
  failedLoginAttempts    Int                  @default(0)
  lockUntil              DateTime?
  passwordResetTokenHash String?
  passwordResetExpires   DateTime?
  activeBusinessId       String?              @db.Char(36)
  business               Business?            @relation("UserActiveBusiness", fields: [activeBusinessId], references: [id])
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @default(now()) @updatedAt @db.Timestamp(6)
  role                   UserRole             @default(USER)
  agent                  Agent?               @relation("UserAgent")
  addressId              String?              @db.Char(36)
  address                Address?             @relation("AddressUser", fields: [addressId], references: [id])
  verificationIntents    VerificationIntent[] @relation("UserVerificationIntent")
  businesses             Business[]           @relation("UserBusiness")
  auditLogs              AuditLog[]           @relation("UserLogs")
  refreshTokens          RefreshToken[]       @relation("UserRefreshToken")
  banks                  Bank[]               @relation("BankUser")
}

model Agent {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  userId        String         @unique @db.VarChar(30)
  category      String?
  user          User           @relation("UserAgent", fields: [userId], references: [id])
  contactPhone  String?        @unique @db.VarChar(20)
  contactEmail  String?
  nationality   String?        @db.VarChar(100)
  nextOfKin     String?
  licenseNumber String?
  addressId     String?        @db.Char(36)
  address       Address?       @relation("AddressAgent", fields: [addressId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt @db.Timestamp(6)
  nextOfKins    NextOfKin[]    @relation("NextOfKinAgent")
  verifications Verification[] @relation("VerificationAgent")
}

model NextOfKin {
  id           String @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  name         String
  phone        String @unique @db.VarChar(20)
  relationship String
  agentId      String @db.Char(36)
  agent        Agent  @relation("NextOfKinAgent", fields: [agentId], references: [id])
}

model Address {
  id             String     @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  streetLine     String
  city           String
  state          String
  country        String     @db.VarChar(100)
  office_address String?
  landmark       String?
  homeAddress    String?
  lga            String?
  updatedAt      DateTime   @default(now()) @updatedAt @db.Timestamp(6)
  createdAt      DateTime   @default(now())
  users          User[]     @relation("AddressUser")
  businesses     Business[] @relation("AddressBusiness")
  agents         Agent[]    @relation("AddressAgent")
}

model Business {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  type           String
  name           String
  verified       Boolean       @default(false)
  startedAt      DateTime?     @db.Date
  operationDays  String?
  operatingHours String?
  verificationId String?       @db.Char(36)
  internetAccess Boolean       @default(true)
  userBase       String        @default("1-50")
  terminals      Int           @default(5)
  userId         String        @db.Char(36)
  user           User          @relation("UserBusiness", fields: [userId], references: [id])
  verification   Verification? @relation("VerificationBusiness", fields: [verificationId], references: [id])
  addressId      String?       @db.Char(36)
  address        Address?      @relation("AddressBusiness", fields: [addressId], references: [id])
  users          User[]        @relation("UserActiveBusiness")
  banks          Bank[]        @relation("BankBusiness")
}

model RefreshToken {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  userId     String
  tokenHash  String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  user       User     @relation("UserRefreshToken", fields: [userId], references: [id])
  deviceInfo String?
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamp(6)
}

model AuditLog {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  userId    String?
  action    String
  meta      Json?
  ip        String?
  createdAt DateTime @default(now())
  user      User?    @relation("UserLogs", fields: [userId], references: [id])
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(6)
}

model Verification {
  id              String     @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  IDType          String     @db.Char(36)
  cac             String?
  MEMART          String?
  authorityLetter String?
  tin             String?
  IDFront         String?    @db.VarChar(2048)
  IDBack          String?    @db.VarChar(2048)
  passport        String?    @db.VarChar(2048)
  utility         String?    @db.VarChar(2048)
  biometric       Boolean    @default(false)
  agentId         String?    @db.Char(36)
  agent           Agent?     @relation("VerificationAgent", fields: [agentId], references: [id])
  businesses      Business[] @relation("VerificationBusiness")
}

model Bank {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  name          String
  accountName   String
  accountNumber Int
  type          String
  userId        String?   @db.Char(36)
  user          User?     @relation("BankUser", fields: [userId], references: [id])
  businessId    String?   @db.Char(36)
  business      Business? @relation("BankBusiness", fields: [businessId], references: [id])
}

model IdempotencyKey {
  key          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  requestHash  String
  responseBody Json?
  statusCode   Int?
  lockedAt     DateTime?
  updatedAt    DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  createdAt    DateTime  @default(now())
}

model VerificationIntent {
  id          String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Char(36)
  user        User                   @relation("UserVerificationIntent", fields: [userId], references: [id])
  userId      String                 @db.Char(36)
  type        VerificationIntentType
  refreshCode String                 @db.VarChar(100)
  expiresAt   DateTime               @default(dbgenerated("NOW() + interval '60 minutes'")) @db.Timestamp(6)
  createdAt   DateTime               @default(now()) @db.Timestamp(6)
  updatedAt   DateTime               @default(now()) @updatedAt @db.Timestamp(6)
}

enum VerificationIntentType {
  EMAIL
  PHONE
}

enum Gender {
  Male
  Female
}

enum UserRole {
  USER
  AGENT
  ADMIN
}
